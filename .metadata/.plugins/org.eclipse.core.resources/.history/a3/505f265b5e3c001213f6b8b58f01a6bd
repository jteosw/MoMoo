package com.example.customview;

import android.app.Activity;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.view.Menu;

public class CustomView extends Activity {
	
	HOLYOMGDRAWINGTHING MCV;
	private Bitmap picture;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
		picture = decodeSampledBitmapFromResource(getResources(), R.drawable.miku, 200, 400);
        MCV = new HOLYOMGDRAWINGTHING(this, picture);
        
//        RelativeLayout root = new RelativeLayout(this);
//        Button butt = new Button(this);
//        butt.setText("CLICK ME!!!");
//        butt.setOnClickListener(new OnClickListener() {
//
//			public void onClick(View v) {
//				Toast.makeText(CustomView.this, "HIHIHIHI", Toast.LENGTH_SHORT).show();
//				
//				
//			}
//        });
//        
//        	
//       
//        RelativeLayout.LayoutParams hi = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
//        root.addView(butt);
        setContentView(MCV);
        
    }
    
	public static int calculateInSampleSize(
            BitmapFactory.Options options, int reqWidth, int reqHeight) {
    // Raw height and width of image
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height > reqHeight || width > reqWidth) {
        if (width > height) {
            inSampleSize = Math.round((float)height / (float)reqHeight);
        } else {
            inSampleSize = Math.round((float)width / (float)reqWidth);
        }
    }
    return inSampleSize;
}
    
    public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,
	        int reqWidth, int reqHeight) {

	    // First decode with inJustDecodeBounds=true to check dimensions
	    final BitmapFactory.Options options = new BitmapFactory.Options();
	    options.inJustDecodeBounds = true;
	    BitmapFactory.decodeResource(res, resId, options);

	    // Calculate inSampleSize
	    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
	    options.inMutable = true;

	    // Decode bitmap with inSampleSize set
	    options.inJustDecodeBounds = false;
	    return BitmapFactory.decodeResource(res, resId, options);
	}
    
    @Override
    protected void onPause() {
    	super.onPause();
    	MCV.pause();
    }
    
    @Override
    protected void onResume() {
    	super.onResume();
    	MCV.resume();
    };

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_custom_view, menu);
        return true;
    }
    
    
}


